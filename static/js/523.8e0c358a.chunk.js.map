{"version":3,"file":"static/js/523.8e0c358a.chunk.js","mappings":"+KAiBA,UAbiB,SAAC,GAAe,IAAbA,EAAY,EAAZA,MAKlB,OAJIA,GACFC,EAAAA,EAAAA,QAAgBD,EAAME,SAExBD,EAAAA,EAAAA,QAAgB,gSAEd,iCACE,SAAC,KAAD,CAAME,GAAG,IAAT,sBACA,6IAGL,C,sICfYC,EAAgB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAC9B,OACE,8BACqB,IAAlBA,EAAOC,QACN,+HAEA,wBACGD,EAAOE,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACV,4BACE,qCAAaD,MACb,uBAAIC,MAFIF,EADA,OAUrB,E,kBCgBD,EA1BgB,WACd,IAAQG,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA4BE,EAAAA,EAAAA,UAAS,MAArC,eAAOR,EAAP,KAAeS,EAAf,KAqBA,OAnBAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,iHAE2BC,EAAAA,EAAAA,gBAAkCL,GAF7D,gBAEYM,EAFZ,EAEYA,KAEFZ,EAASY,EAAKC,QAAQX,KAAI,kBAA8B,CAC5DC,GAD8B,EAAGA,GAEjCC,OAF8B,EAAOA,OAGrCC,QAH8B,EAAeA,QAAf,IAMhCI,EAAUT,GAVd,gDAYKc,EAAA,QAAc,KAZnB,0DADc,uBAAC,WAAD,wBAiBdC,EACD,GAAE,CAACT,KACG,8BAAGN,IAAU,SAACD,EAAD,CAAeC,OAAQA,KAC5C,C,4EC7BYJ,EAAU,CACrBoB,QADqB,SACbnB,GACNoB,IAAAA,OAAAA,QAAwBpB,EACzB,EAEDqB,QALqB,SAKbrB,GACNoB,IAAAA,OAAAA,QAAwBpB,EACzB,EAEDsB,QATqB,SASbtB,GACNoB,IAAAA,OAAAA,QAAwBpB,EACzB,E,kICVHuB,EAAAA,EAAAA,SAAAA,QADiB,+BAEjBA,EAAAA,EAAAA,SAAAA,QAAyB,IAAzB,0BAEMC,EAAAA,WAAAA,SAAAA,KAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,OAAAA,eAAAA,KAAAA,EAAAA,CAAAA,UAAAA,EAAAA,MAEF,oOAEFC,QAAU,CACRC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,eAAc,OAACC,KAAF,OAEfC,OAAQ,CACNC,SAAU,SAPJ,CAoCT,OApCS,2EAWV,8FACeT,EAAAA,EAAAA,IAAA,sBAAiCO,KAAKL,SADrD,0IAXU,IAWV,+DAIA,WAAqBQ,GAArB,iFACeV,EAAAA,EAAAA,IAAA,8BACYU,EADZ,+BAEXH,KAAKL,SAHT,2IAJA,IAIA,gEAOA,WAAsBnB,GAAtB,iFACeiB,EAAAA,EAAAA,IAAA,iBAAoBjB,EAApB,KAA2BwB,KAAKL,SAD/C,2IAPA,IAOA,gEAIA,WAAsBnB,GAAtB,iFACeiB,EAAAA,EAAAA,IAAA,iBAAoBjB,EAApB,YAAkCwB,KAAKL,SADtD,2IAJA,IAIA,gEAIA,WAAsBnB,GAAtB,iFACeiB,EAAAA,EAAAA,IAAA,iBAAoBjB,EAApB,mBAAyCwB,KAAKL,SAD7D,2IAJA,IAIA,oBAIA,SAAOS,EAAMC,GACX,MAAM,8BAAN,OAAqCD,GAArC,OAA4CC,EAC7C,OAxCGX,GA2COV,EAAoB,IAAIU,C","sources":["components/NotFound/NotFound.jsx","components/Reviews/RenderReviews.jsx","components/Reviews/Reviews.jsx","utils/message.js","utils/themoviedbApi.js"],"sourcesContent":["import { Link } from 'react-router-dom';\n\nimport { Message } from 'utils/message';\n\nconst NotFound = ({ error }) => {\n  if (error) {\n    Message.failure(error.message);\n  }\n  Message.failure('Щось пішло не так, спробуйте перезавантажити сторінку');\n  return (\n    <>\n      <Link to=\"/\">Go back</Link>\n      <h2>Сторінку не знайдено</h2>\n    </>\n  );\n};\n\nexport default NotFound;\n","export const RenderReviews = ({ review }) => {\n  return (\n    <>\n      {review.length === 0 ? (\n        <p>Нічого не знайдено</p>\n      ) : (\n        <ul>\n          {review.map(({ id, author, content }) => (\n            <div key={id}>\n              <h5>Author: {author}</h5>\n              <p>{content}</p>\n            </div>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { RenderReviews } from 'components/Reviews/RenderReviews';\nimport { fetchImgsInstance } from 'utils/themoviedbApi';\nimport NotFound from 'components/NotFound/NotFound';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [review, setReview] = useState(null);\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const { data } = await fetchImgsInstance.getMovieReviews(movieId);\n\n        const review = data.results.map(({ id, author, content }) => ({\n          id,\n          author,\n          content,\n        }));\n\n        setReview(review);\n      } catch (error) {\n        <NotFound error={error} />;\n      }\n    }\n\n    fetchData();\n  }, [movieId]);\n  return <>{review && <RenderReviews review={review} />}</>;\n};\n\nexport default Reviews;\n","import Notiflix from 'notiflix';\n\nexport const Message = {\n  success(message) {\n    Notiflix.Notify.success(message);\n  },\n\n  failure(message) {\n    Notiflix.Notify.failure(message);\n  },\n\n  warning(message) {\n    Notiflix.Notify.warning(message);\n  },\n};\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\naxios.defaults.baseURL = BASE_URL;\naxios.defaults.timeout = 1000;\n\nclass fetchImgs {\n  #AUTH_KEY =\n    'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJmYmE2OTViZjhjZDk3YzJlZjFjMmE4YTIwN2E1MDc5MSIsInN1YiI6IjY0NzI1YzdiYmUyZDQ5MDBhN2Q1ZDBmMCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.lPU0wQ1y9n834eQ_fI0wPgzW-vuaEfLFb91z2AfAWd0';\n\n  options = {\n    method: 'GET',\n    headers: {\n      accept: 'application/json',\n      Authorization: this.#AUTH_KEY,\n    },\n    params: {\n      language: 'en-US',\n    },\n  };\n\n  async getTrendingMovie() {\n    return await axios.get(`/trending/movie/day`, this.options);\n  }\n\n  async getSearchMovie(query) {\n    return await axios.get(\n      `/search/movie?query=${query}&include_adult=false&page=1`,\n      this.options\n    );\n  }\n\n  async getMovieDetails(id) {\n    return await axios.get(`/movie/${id}}`, this.options);\n  }\n\n  async getMovieCredits(id) {\n    return await axios.get(`/movie/${id}/credits`, this.options);\n  }\n\n  async getMovieReviews(id) {\n    return await axios.get(`/movie/${id}/reviews?page=1`, this.options);\n  }\n\n  getImg(size, imgPath) {\n    return `https://image.tmdb.org/t/p/${size}${imgPath}`;\n  }\n}\n\nexport const fetchImgsInstance = new fetchImgs();\n"],"names":["error","Message","message","to","RenderReviews","review","length","map","id","author","content","movieId","useParams","useState","setReview","useEffect","fetchImgsInstance","data","results","NotFound","fetchData","success","Notiflix","failure","warning","axios","fetchImgs","options","method","headers","accept","Authorization","this","params","language","query","size","imgPath"],"sourceRoot":""}