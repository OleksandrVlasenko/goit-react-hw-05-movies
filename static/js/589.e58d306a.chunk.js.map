{"version":3,"file":"static/js/589.e58d306a.chunk.js","mappings":"qRAGaA,EAAa,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC3B,OACE,8BACmB,IAAhBA,EAAKC,QACJ,+HAEA,wBACGD,EAAKE,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAWC,EAAxB,EAAwBA,aAAxB,OACR,4BACE,gBACEC,IACED,EACIE,EAAAA,EAAAA,OAAyB,MAAOF,GAChCG,EAENC,IAAKN,EACLO,MAAM,QAER,wBAAKP,IACU,KAAdC,IAAoB,uCAAeA,OAX5BF,EADF,OAmBnB,ECMD,EA5Ba,WACX,IAAQS,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOd,EAAP,KAAae,EAAb,KAuBA,OArBAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,iHAE2BR,EAAAA,EAAAA,gBAAkCI,GAF7D,gBAEYK,EAFZ,EAEYA,KAEFjB,EAAOiB,EAAKjB,KAAKE,KAAI,kBAA4C,CACrEC,GADyB,EAAGA,GAE5BC,KAFyB,EAAOA,KAGhCC,UAHyB,EAAaA,UAItCC,aAJyB,EAAwBA,aAAxB,IAO3BS,EAAQf,GAXZ,gDAaKkB,EAAA,QAAc,KAbnB,0DADc,uBAAC,WAAD,wBAkBdC,EACD,GAAE,CAACP,KAEG,8BAAGZ,IAAQ,SAACD,EAAD,CAAYC,KAAMA,KACrC,C,2DChBD,UAbiB,SAAC,GAAe,IAAboB,EAAY,EAAZA,MAKlB,OAJIA,GACFC,EAAAA,EAAAA,QAAgBD,EAAME,SAExBD,EAAAA,EAAAA,QAAgB,gSAEd,iCACE,SAAC,KAAD,CAAME,GAAG,IAAT,sBACA,6IAGL,C,4ECbYF,EAAU,CACrBG,QADqB,SACbF,GACNG,IAAAA,OAAAA,QAAwBH,EACzB,EAEDI,QALqB,SAKbJ,GACNG,IAAAA,OAAAA,QAAwBH,EACzB,EAEDK,QATqB,SASbL,GACNG,IAAAA,OAAAA,QAAwBH,EACzB,E,kICVHM,EAAAA,EAAAA,SAAAA,QADiB,+BAEjBA,EAAAA,EAAAA,SAAAA,QAAyB,IAAzB,0BAEMC,EAAAA,WAAAA,SAAAA,KAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,OAAAA,eAAAA,KAAAA,EAAAA,CAAAA,UAAAA,EAAAA,MAEF,oOAEFC,QAAU,CACRC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,eAAc,OAACC,KAAF,OAEfC,OAAQ,CACNC,SAAU,SAPJ,CAoCT,OApCS,2EAWV,8FACeT,EAAAA,EAAAA,IAAA,sBAAiCO,KAAKL,SADrD,0IAXU,IAWV,+DAIA,WAAqBQ,GAArB,iFACeV,EAAAA,EAAAA,IAAA,8BACYU,EADZ,+BAEXH,KAAKL,SAHT,2IAJA,IAIA,gEAOA,WAAsB3B,GAAtB,iFACeyB,EAAAA,EAAAA,IAAA,iBAAoBzB,EAApB,KAA2BgC,KAAKL,SAD/C,2IAPA,IAOA,gEAIA,WAAsB3B,GAAtB,iFACeyB,EAAAA,EAAAA,IAAA,iBAAoBzB,EAApB,YAAkCgC,KAAKL,SADtD,2IAJA,IAIA,gEAIA,WAAsB3B,GAAtB,iFACeyB,EAAAA,EAAAA,IAAA,iBAAoBzB,EAApB,mBAAyCgC,KAAKL,SAD7D,2IAJA,IAIA,oBAIA,SAAOS,EAAMC,GACX,MAAM,8BAAN,OAAqCD,GAArC,OAA4CC,EAC7C,OAxCGX,GA2COrB,EAAoB,IAAIqB,C","sources":["components/Cast/RenderCast.jsx","components/Cast/Cast.jsx","components/NotFound/NotFound.jsx","utils/message.js","utils/themoviedbApi.js"],"sourcesContent":["import placeholder from 'images/images.png';\nimport { fetchImgsInstance } from 'utils/themoviedbApi';\n\nexport const RenderCast = ({ cast }) => {\n  return (\n    <>\n      {cast.length === 0 ? (\n        <p>Нічого не знайдено</p>\n      ) : (\n        <ul>\n          {cast.map(({ id, name, character, profile_path }) => (\n            <div key={id}>\n              <img\n                src={\n                  profile_path\n                    ? fetchImgsInstance.getImg('w45', profile_path)\n                    : placeholder\n                }\n                alt={name}\n                width=\"45\"\n              />\n              <h5>{name}</h5>\n              {character !== '' && <p>Character: {character}</p>}\n            </div>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { fetchImgsInstance } from 'utils/themoviedbApi';\nimport NotFound from '../NotFound/NotFound';\nimport { RenderCast } from './RenderCast';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState(null);\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const { data } = await fetchImgsInstance.getMovieCredits(movieId);\n\n        const cast = data.cast.map(({ id, name, character, profile_path }) => ({\n          id,\n          name,\n          character,\n          profile_path,\n        }));\n\n        setCast(cast);\n      } catch (error) {\n        <NotFound error={error} />;\n      }\n    }\n\n    fetchData();\n  }, [movieId]);\n\n  return <>{cast && <RenderCast cast={cast} />}</>;\n};\n\nexport default Cast;\n","import { Link } from 'react-router-dom';\n\nimport { Message } from 'utils/message';\n\nconst NotFound = ({ error }) => {\n  if (error) {\n    Message.failure(error.message);\n  }\n  Message.failure('Щось пішло не так, спробуйте перезавантажити сторінку');\n  return (\n    <>\n      <Link to=\"/\">Go back</Link>\n      <h2>Сторінку не знайдено</h2>\n    </>\n  );\n};\n\nexport default NotFound;\n","import Notiflix from 'notiflix';\n\nexport const Message = {\n  success(message) {\n    Notiflix.Notify.success(message);\n  },\n\n  failure(message) {\n    Notiflix.Notify.failure(message);\n  },\n\n  warning(message) {\n    Notiflix.Notify.warning(message);\n  },\n};\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\naxios.defaults.baseURL = BASE_URL;\naxios.defaults.timeout = 1000;\n\nclass fetchImgs {\n  #AUTH_KEY =\n    'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJmYmE2OTViZjhjZDk3YzJlZjFjMmE4YTIwN2E1MDc5MSIsInN1YiI6IjY0NzI1YzdiYmUyZDQ5MDBhN2Q1ZDBmMCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.lPU0wQ1y9n834eQ_fI0wPgzW-vuaEfLFb91z2AfAWd0';\n\n  options = {\n    method: 'GET',\n    headers: {\n      accept: 'application/json',\n      Authorization: this.#AUTH_KEY,\n    },\n    params: {\n      language: 'en-US',\n    },\n  };\n\n  async getTrendingMovie() {\n    return await axios.get(`/trending/movie/day`, this.options);\n  }\n\n  async getSearchMovie(query) {\n    return await axios.get(\n      `/search/movie?query=${query}&include_adult=false&page=1`,\n      this.options\n    );\n  }\n\n  async getMovieDetails(id) {\n    return await axios.get(`/movie/${id}}`, this.options);\n  }\n\n  async getMovieCredits(id) {\n    return await axios.get(`/movie/${id}/credits`, this.options);\n  }\n\n  async getMovieReviews(id) {\n    return await axios.get(`/movie/${id}/reviews?page=1`, this.options);\n  }\n\n  getImg(size, imgPath) {\n    return `https://image.tmdb.org/t/p/${size}${imgPath}`;\n  }\n}\n\nexport const fetchImgsInstance = new fetchImgs();\n"],"names":["RenderCast","cast","length","map","id","name","character","profile_path","src","fetchImgsInstance","placeholder","alt","width","movieId","useParams","useState","setCast","useEffect","data","NotFound","fetchData","error","Message","message","to","success","Notiflix","failure","warning","axios","fetchImgs","options","method","headers","accept","Authorization","this","params","language","query","size","imgPath"],"sourceRoot":""}