{"version":3,"file":"static/js/593.dd878639.chunk.js","mappings":"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","sources":["components/GoBackBtn/GoBackBtn.styled.js","components/GoBackBtn/GoBackBtn.jsx","components/MoviesListItem/MoviesListItem.styled.js","components/MoviesListItem/MoviesListItem.jsx","components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.jsx","components/NotFound/NotFound.jsx","components/SearchForm/SearchForm.styled.js","components/SearchForm/SearchForm.jsx","pages/Movies.jsx","utils/message.js","utils/themoviedbApi.js"],"sourcesContent":["import styled from \"@emotion/styled\";\nimport { NavLink } from \"react-router-dom\";\n\nexport const LinkStyled = styled(NavLink)`\ndisplay: block;\npadding: 3px;\nborder: 1px solid black;\nwidth: 60px;\nmargin-bottom: 10px;\n\n&:hover {\n  color: orange\n}\n`","import { LinkStyled } from \"./GoBackBtn.styled\";\n\nexport const GoBackBtn = ({link}) => {\n  return <LinkStyled to={link}>Go back</LinkStyled>;\n}","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const LinkStyled = styled(Link)`\n  display: block;\n\n  &:hover {\n    color: orange;\n  }\n`;\n","import { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { LinkStyled } from './MoviesListItem.styled';\n\nconst MoviesListItem = ({ title, id }) => {\n  const location = useLocation();\n\n  return (\n    <LinkStyled to={`/movies/${id}`} state={{ from: location }}>\n      {title}\n    </LinkStyled>\n  );\n};\n\nexport default MoviesListItem;\n\nMoviesListItem.propTypes = {\n  title: PropTypes.string.isRequired,\n  id: PropTypes.number.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  margin-left: 30px;\n`;\n","import PropTypes from 'prop-types';\n\nimport MoviesListItem from 'components/MoviesListItem/MoviesListItem';\nimport { List } from './MoviesList.styled';\n\nconst MoviesList = ({ movies }) => {\n  return (\n    <List>\n      {movies.map(({ title, id }) => (\n        <MoviesListItem key={id} title={title} id={id} />\n      ))}\n    </List>\n  );\n};\n\nexport default MoviesList;\n\nMoviesList.propTypes = {\n  movies: PropTypes.array.isRequired,\n}\n","import PropTypes from 'prop-types';\n\nimport { GoBackBtn } from 'components/GoBackBtn/GoBackBtn';\nimport { Message } from 'utils/message';\n\nconst NotFound = ({ error }) => {\n  if (error) {\n    Message.failure(error.message);\n  }\n  Message.failure('Щось пішло не так, спробуйте перезавантажити сторінку');\n  return (\n    <>\n      <GoBackBtn link=\"/\" />\n      <h2>Сторінку не знайдено</h2>\n    </>\n  );\n};\n\nexport default NotFound;\n\nNotFound.propTypes = {\n  error: PropTypes.object,\n}\n","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  display: flex;\n  gap: 5px;\n  padding: 20px;\n`;\n","import { useEffect, useRef, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { Message } from 'utils/message';\nimport { Form } from './SearchForm.styled';\n\nconst SearchForm = ({ onSubmit }) => {\n  const [query, setQuery] = useState('');\n  const [searchParams] = useSearchParams();\n  const queryRef = useRef(searchParams.get('query') ?? '');\n\n  useEffect(() => {\n    setQuery(queryRef.current);\n  }, []);\n\n  const handleChange = e => {\n    setQuery(e.target.value);\n  };\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    if (query.trim() === '') {\n      Message.warning('Введіть назву фільму');\n      return;\n    }\n    onSubmit(query.toLowerCase());\n  }\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        name=\"movie\"\n        autoFocus\n        placeholder=\"Search movies\"\n        autoComplete=\"on\"\n        value={query}\n        onChange={handleChange}\n      />\n      <button type=\"submit\">Search</button>\n    </Form>\n  );\n};\n\nexport default SearchForm;\n\nSearchForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n}\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { fetchImgsInstance } from 'utils/themoviedbApi';\nimport { Message } from 'utils/message';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport SearchForm from 'components/SearchForm/SearchForm';\nimport NotFound from 'components/NotFound/NotFound';\n\nconst Movies = () => {\n  const [searchMovies, setSearchMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    if (query === '') {\n      return;\n    }\n    async function fetchData() {\n      try {\n        const {\n          data: { results },\n        } = await fetchImgsInstance.getSearchMovie(query);\n\n        if (results.length === 0) {\n          Message.failure('По вашому запиту нічого не знайдено');\n          setSearchMovies([]);\n          return;\n        }\n\n        const movies = results.map(({ title, id }) => ({ title, id }));\n\n        setSearchMovies(movies);\n      } catch (error) {\n        <NotFound error={error} />;\n      }\n    }\n\n    fetchData();\n  }, [query]);\n\n  const updateQueryString = query => {\n    setSearchParams({ query });\n  };\n\n  return (\n    <>\n      <SearchForm onSubmit={updateQueryString} />\n      <MoviesList movies={searchMovies} />\n    </>\n  );\n};\n\nexport default Movies;\n","import Notiflix from 'notiflix';\n\nexport const Message = {\n  success(message) {\n    Notiflix.Notify.success(message);\n  },\n\n  failure(message) {\n    Notiflix.Notify.failure(message);\n  },\n\n  warning(message) {\n    Notiflix.Notify.warning(message);\n  },\n};\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\naxios.defaults.baseURL = BASE_URL;\naxios.defaults.timeout = 1000;\n\nclass fetchImgs {\n  #AUTH_KEY =\n    'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJmYmE2OTViZjhjZDk3YzJlZjFjMmE4YTIwN2E1MDc5MSIsInN1YiI6IjY0NzI1YzdiYmUyZDQ5MDBhN2Q1ZDBmMCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.lPU0wQ1y9n834eQ_fI0wPgzW-vuaEfLFb91z2AfAWd0';\n\n  options = {\n    method: 'GET',\n    headers: {\n      accept: 'application/json',\n      Authorization: this.#AUTH_KEY,\n    },\n    params: {\n      language: 'en-US',\n    },\n  };\n\n  async getTrendingMovie() {\n    return await axios.get(`/trending/movie/day`, this.options);\n  }\n\n  async getSearchMovie(query) {\n    return await axios.get(\n      `/search/movie?query=${query}&include_adult=false&page=1`,\n      this.options\n    );\n  }\n\n  async getMovieDetails(id) {\n    return await axios.get(`/movie/${id}}`, this.options);\n  }\n\n  async getMovieCredits(id) {\n    return await axios.get(`/movie/${id}/credits`, this.options);\n  }\n\n  async getMovieReviews(id) {\n    return await axios.get(`/movie/${id}/reviews?page=1`, this.options);\n  }\n\n  getImg(size, imgPath) {\n    return `https://image.tmdb.org/t/p/${size}${imgPath}`;\n  }\n}\n\nexport const fetchImgsInstance = new fetchImgs();\n"],"names":["LinkStyled","styled","NavLink","GoBackBtn","link","to","Link","title","id","location","useLocation","state","from","List","movies","map","error","Message","message","Form","onSubmit","useState","query","setQuery","useSearchParams","searchParams","queryRef","useRef","get","useEffect","current","e","preventDefault","trim","toLowerCase","type","name","autoFocus","placeholder","autoComplete","value","onChange","target","searchMovies","setSearchMovies","setSearchParams","fetchImgsInstance","results","data","length","NotFound","fetchData","MoviesList","success","Notiflix","failure","warning","axios","fetchImgs","options","method","headers","accept","Authorization","this","params","language","size","imgPath"],"sourceRoot":""}